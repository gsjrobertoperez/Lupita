/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ArticleInfoPanel.java
 *
 * Created on 17/07/2010, 03:07:18 PM
 */
package gui.article;


import bussiness.Article;
import common.Constants;
import common.InputValidator;
import common.ValidationException;
import dao.ArticleDAO;
import model.ArticleInfoModel;
import java.awt.Color;
import java.sql.SQLException;
import javax.swing.JOptionPane;

/**
 *
 * @author Luc3
 */
public class ArticleInfoPanel extends javax.swing.JPanel {

    /** Creates new form ArticleInfoPanel */
    ArticleInfoModel model;
    Article selectedArt;

    public ArticleInfoPanel() {
        initComponents();
    }

    public void setEnabled(boolean b){
        descText.setEnabled(b);
        amountText.setEnabled(b);
        priceText.setEnabled(b);
    }

    public void resetTextField() {

        descText.setText("");
        amountText.setText("");
        priceText.setText("");
        //this.setVisible(false);

    }

    public void setModel(ArticleInfoModel model) {

        this.model = model;
    }

    public void setArticleInfo(Article info) {
        this.selectedArt = info;
        descText.setText(info.getDescripcion());
        amountText.setText(Integer.toString(info.getCantidad()));
        priceText.setText(Double.toString(info.getpr_Venta()));
    }

    public Article getArticleInfo() {

        String descripcion = descText.getText();
        String cantidad = amountText.getText();
        String precio = priceText.getText();

        if (this.selectedArt == null) {
            return new Article(descripcion, Integer.parseInt(cantidad), Double.parseDouble(precio));
        } else {
            return new Article(this.selectedArt.getid_A(), descripcion, Integer.parseInt(cantidad), Double.parseDouble(precio));
        }
    }

    public void validateInput() throws ValidationException {

        boolean isValidDesc = InputValidator.validateText(descText);
        boolean isValidAmount = InputValidator.validateIntNumber(amountText);
        boolean isValidPrice = InputValidator.validateDoubleNumber(priceText);

        if (isValidDesc || isValidAmount || isValidPrice) {
            throw new ValidationException(InputValidator.GENERAL_ERROR);
        }
    }

    public void successfulMessage(String message) {

        JOptionPane.showMessageDialog(this.getParent(), message);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        descLabel = new javax.swing.JLabel();
        amountLabel = new javax.swing.JLabel();
        descText = new javax.swing.JTextField();
        amountText = new javax.swing.JTextField();
        priceLabel = new javax.swing.JLabel();
        priceText = new javax.swing.JTextField();
        saveButton = new javax.swing.JButton();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        descLabel.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        descLabel.setText("Descripción:");

        amountLabel.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        amountLabel.setText("Cantidad: ");

        descText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                descTextMouseClicked(evt);
            }
        });
        descText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                descTextFocusLost(evt);
            }
        });

        amountText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                amountTextMouseClicked(evt);
            }
        });

        priceLabel.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        priceLabel.setText("Precio:");

        priceText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                priceTextMouseClicked(evt);
            }
        });

        saveButton.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        saveButton.setText("GUARDAR");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(descLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(descText, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(amountLabel)
                            .addComponent(priceLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(priceText, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                            .addComponent(saveButton)
                            .addComponent(amountText, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE))))
                .addGap(51, 51, 51))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(descLabel)
                    .addComponent(descText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(amountText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(amountLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(priceText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(priceLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addComponent(saveButton)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed

        try {
            validateInput();
            Article artInfo = getArticleInfo();
            if (model.getAction().equals("AGREGAR")) {

                if (Constants.confirmDialog(this.getParent(), "¿Esta seguro que desea agregar " + artInfo.getDescripcion() + "?")) {
                    ArticleDAO.insertArticleInfo(artInfo);
                    String message = artInfo.getDescripcion() + " ha sido agregado exitosamente";
                    successfulMessage(message);
                }

               
            } else if (model.getAction().equals("EDITAR")) {
                if (Constants.confirmDialog(this.getParent(), "¿Esta seguro que desea editar " + artInfo.getDescripcion() + "?")) {
                    ArticleDAO.updateArticleInfo(artInfo);
                    String message = artInfo.getDescripcion() + " ha sido editado exitosamente";
                    successfulMessage(message);
                }


            } else if (model.getAction().equals("ELIMINAR")) {
                if (Constants.confirmDialog(this.getParent(), "¿Esta seguro que desea eliminar " + artInfo.getDescripcion() + "?")) {
                    ArticleDAO.deleteArticleInfo(artInfo);
                    String message = artInfo.getDescripcion() + " ha sido elminado exitosamente";
                    successfulMessage(message);

                }

            }

            MainArticlePanel.setArticleList(ArticleDAO.getArticleInfo());

            resetTextField();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this.getParent(), ex.getMessage());
        } catch (ValidationException ex) {
            JOptionPane.showMessageDialog(this.getParent(), ex.getMessage());
        }

    }//GEN-LAST:event_saveButtonActionPerformed

    private void descTextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_descTextMouseClicked
        descText.setForeground(Color.BLACK);
    }//GEN-LAST:event_descTextMouseClicked

    private void amountTextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_amountTextMouseClicked
        amountText.setForeground(Color.BLACK);
    }//GEN-LAST:event_amountTextMouseClicked

    private void priceTextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_priceTextMouseClicked
        priceText.setForeground(Color.BLACK);
    }//GEN-LAST:event_priceTextMouseClicked

    private void descTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_descTextFocusLost
        String desc = descText.getText().toUpperCase();
        descText.setText(desc);
    }//GEN-LAST:event_descTextFocusLost

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        this.saveButton.setText(model.getAction());
        if (model.getAction().equals("ELIMINAR")) {
            //resetTextField();
            setEnabled(false);
        }else if(model.getAction().equals("AGREGAR")){
          // resetTextField();
            setEnabled(true);
        }else{
           // resetTextField();
            setEnabled(true); 
        }
    }//GEN-LAST:event_formComponentShown
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel amountLabel;
    private javax.swing.JTextField amountText;
    private javax.swing.JLabel descLabel;
    private javax.swing.JTextField descText;
    private javax.swing.JLabel priceLabel;
    private javax.swing.JTextField priceText;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables
}
